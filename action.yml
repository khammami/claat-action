name: "CLaaT export"

description: |
  Convert Google Docs to codelabs (HTML, Markdown, offline) with CLaat. Includes converting Markdown files to HTML codelabs.

inputs:
  command:
    description: |
      claat command. (export, update, serve)
      Default is export
    required: false
    default: "export"
  source:
    description: |
      Accepted File Formats: Google document ID Markdown file (.md)
      If input \'codelabs-json\' is set, \'source\' will be ignored.
    required: true
    default: ""
  auth:
    description: |
      A Google OAuth2.0 token is required to access Google documents.
      (Except when exporting .md files to HTML.)
      Default is ''
    required: false
    default: ""
  codelabs-path:
    description: |
      Exported codelab(s) will be saved to your chosen path.
      Default is ''
    required: false
    default: ""
  gaid:
    description: |
      Google Analytics ID
      Default is ''
    required: false
    default: ""
  ga4id:
    description: |
      Google Analytics v4 ID
      Default is ''
    required: false
    default: ""
  codelabs-json:
    description: |
      The path to a JSON file containing a list of Google document IDs.
      Default is ''
    required: false
    default: ""
  format:
    description: |
      Choose export format (html, md, offline or all).
      Default is html
    required: false
    default: "html"
  environment:
    description: |
      codelab environment.
      Default is ''
    required: false
    default: ""
  prefix:
    description: |
      URL prefix for html format.
      Default is ''
    required: false
    default: ""
  elements-path:
    description: |
      Local path (JS and CSS) of codelab elements. (in case Google prefix is broken)
      Default is 'elements/codelab-elements'
    required: false
    default: "elements/codelab-elements"
  elements-default-path:
    description: |
      External path (JS and CSS) of codelab elements. (hosted by Google)
      Default is 'claat-public'
    required: false
    default: "claat-public"
  extra:
    description: |
      Additional arguments to pass to format templates. JSON object of string,string key values.
      Default is ''
    required: false
    default: ""
  metadata:
    description: |
      Metadata fields to pass through to the output. Comma-delimited list of field names.
      Default is ''
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Check Runner OS
      if: ${{ runner.os != 'Linux' }}
      shell: bash
      run: |
        echo "::error title=⛔ error hint::Support Linux Only"
        exit 1

    - name: Check claat command
      shell: bash
      run: |
        echo "::group::Check claat command"
        claat version >/dev/null 2>&1 || (echo "::error title=⛔ error hint::The command 'claat' is not installed." && exit 1)
        echo "claat is installed."
        echo "::endgroup::"

    - name: Command builder
      shell: bash
      env:
        CL_GHA_GAID: ${{ inputs.gaid }}
        CL_GHA_AUTH: ${{ inputs.auth }}
        CL_GHA_FORMAT: ${{ inputs.format }}
        CL_GHA_ENVIRONMENT: ${{ inputs.environment }}
        CL_GHA_COMMAND: ${{ inputs.command }}
        CL_GHA_PREFIX: ${{ inputs.prefix }}
        CL_GHA_EXTRA: ${{ inputs.extra }}
        CL_GHA_METADATA: ${{ inputs.metadata }}
      run: |
        echo "::group::Build command"
        claat_command="claat ${CL_GHA_COMMAND}"
        [[ -n "$CL_GHA_ENVIRONMENT" ]] && claat_command+=" -e \"$CL_GHA_ENVIRONMENT\""  
        [[ -n "$CL_GHA_GAID" ]] && claat_command+=" -ga \"$CL_GHA_GAID\""  
        [[ "$CL_GHA_FORMAT" == "md" ]] && claat_command+=" -f \"$CL_GHA_FORMAT\""
        [[ -n "$CL_GHA_PREFIX" ]] && claat_command+=" -prefix \"$CL_GHA_PREFIX\""
        [[ -n "$CL_GHA_EXTRA" ]] && claat_command+=" -extra \"$CL_GHA_EXTRA\"" 
        [[ -n "$CL_GHA_METADATA" ]] && claat_command+=" -pass_metadata \"$CL_GHA_METADATA\""   
        [[ -n "$CL_GHA_AUTH" ]] && claat_command+=" -auth \"$CL_GHA_AUTH\""
        echo "CLAAT_COMMAND=$claat_command" >> $GITHUB_ENV 
        echo "::endgroup::"

    - name: Export codelab(s)
      shell: bash
      env:
        CL_GHA_SOURCES: ${{ inputs.source }}
        CL_GHA_JSON_FILE: ${{ inputs.codelabs-json }}
        CL_GHA_OUTPUT_PATH: ${{ inputs.codelabs-path }}
      working-directory: ${{ contains(fromJSON('["update"]'), inputs.command) && inputs.codelabs-path || './' }}
      run: |
        echo "::group::Export codelab(s)"
        echo "Current directory: $(pwd)"
        [[ -n "$CL_GHA_OUTPUT_PATH" ]] && mkdir -p "$CL_GHA_OUTPUT_PATH"
        if [[ "$CL_GHA_JSON_FILE" != '' ]]; then
          CL_GHA_SOURCES=$(jq -r '.[].source' $CL_GHA_JSON_FILE | tr '\n' ' ')
        fi
        echo "${{ inputs.command }}..."
        echo -e "$CL_GHA_SOURCES" | tr ' ' '\n'
        base_command="${CLAAT_COMMAND}"
        if [[ "${{ inputs.command }}" == "export" || "${{ inputs.command }}" == "update" ]]; then
          [[ -n "$CL_GHA_OUTPUT_PATH" ]] && base_command+=" -o \"$CL_GHA_OUTPUT_PATH/\""
          base_command+=" $CL_GHA_SOURCES"
          echo -e "claat command:\n ${base_command}"
          if [[ "${{ inputs.format }}" == "all" ]]; then
            dir_name_md=${CL_GHA_OUTPUT_PATH:+${CL_GHA_OUTPUT_PATH}-md}
            dir_name_md=${dir_name_md:-md}
            mkdir -p "$dir_name_md"
            md_command="${CLAAT_COMMAND} -o \"${dir_name_md}/\" -f \"md\" $CL_GHA_SOURCES"
            echo -e "claat command(md):\n ${md_command}"
          fi
          eval "$base_command $@"
          [[ "${{ inputs.format }}" == "all" ]] && eval "$md_command $@"
        fi
        echo "::endgroup::"

    # ga4id parser has been added to md parser but not yet in gdocs parser
    - name: Fix missing ga4id
      shell: bash
      if: ${{ contains(fromJSON('["html", "all"]'), inputs.format) && inputs.ga4id != '' }}
      working-directory: ${{ inputs.codelabs-path }}
      run: |
        echo "::group::Fix missing ga4id"
        find . -type f -name "index.html" -print0 | while IFS= read -r -d '' file; do
          sed -i 's/ga4id=""/ga4id="${{ inputs.ga4id }}"/g; s/codelab-ga4id=""/codelab-ga4id="${{ inputs.ga4id }}"/g' "$file"
        done
        echo "Missing ga4id in html format has been added."
        echo "::endgroup::"

    - name: Fix local path of codelab elements
      shell: bash
      if: ${{ contains(fromJSON('["html", "all"]'), inputs.format) && inputs.prefix != '' &&  inputs.elements-path != '' && inputs.elements-default-path != ''}}
      working-directory: ${{ inputs.codelabs-path }}
      env:
        CL_GHA_EXTERNAL_PATH: ${{ inputs.elements-default-path }}
        CL_GHA_LOCAL_PATH: ${{ inputs.elements-path }}
      run: |
        echo "::group::Fix elements local path"
        find . -type f -name "index.html" -print0 | while IFS= read -r -d '' file; do
          sed -i "s/${CL_GHA_EXTERNAL_PATH//\//\\\/}/${CL_GHA_LOCAL_PATH//\//\\\/}/g" "$file"
        done
        echo "The default local path of codelab elements in html format has been replaced."
        echo "::endgroup::"

# Ref: https://haya14busa.github.io/github-action-brandings/
branding:
  icon: "upload"
  color: "green"
